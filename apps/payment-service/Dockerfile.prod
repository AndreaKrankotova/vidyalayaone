# Stage 1: Build
FROM node:22.16.0-alpine AS builder

# Install build tools
RUN apk add --no-cache git python3 make g++

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@10.12.1 --activate

WORKDIR /app

# Copy root package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml tsconfig.base.json ./

# Copy packages and service code
COPY packages/ ./packages/
COPY apps/payment-service/ ./apps/payment-service/

# Install all dependencies (dev + prod) to build
RUN pnpm install --frozen-lockfile

# Build shared packages
RUN pnpm build:packages

WORKDIR /app/apps/payment-service

# Generate Prisma client
RUN pnpm db:generate

# Build the service
RUN pnpm build

# Stage 2: Production image (minimal)
FROM node:22.16.0-alpine AS prod

WORKDIR /app

# Install runtime-only dependencies
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
RUN corepack enable && corepack prepare pnpm@10.12.1 --activate
RUN pnpm install --frozen-lockfile --prod

# Copy only built output and Prisma client from builder
COPY --from=builder /app/packages ./packages
COPY --from=builder /app/apps/payment-service/dist ./apps/payment-service/dist
COPY --from=builder /app/apps/payment-service/prisma ./apps/payment-service/prisma
COPY --from=builder /app/apps/payment-service/package.json ./apps/payment-service/package.json

WORKDIR /app/apps/payment-service

# Remove unnecessary files to shrink image
RUN rm -rf node_modules/.cache \
    && rm -rf dist/**/*.map \
    && rm -rf **/__tests__ \
    && rm -rf **/*.ts

# Expose port
EXPOSE 3005

# Start the service
CMD ["pnpm", "start"]
