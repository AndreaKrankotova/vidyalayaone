# Base image with Node.js and pnpm support
FROM node:22-alpine AS base

# Set pnpm environment variables
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV NODE_ENV=production

# Enable pnpm via corepack
RUN corepack enable

# Install curl for health checks (no apk upgrade to avoid bloat)
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S appgroup \
  && adduser -S appuser -u 1001 -G appgroup

# =============================================================================
# Dependencies stage - install full deps for building
# =============================================================================
FROM base AS deps

WORKDIR /app

# Copy workspace configs and package manifests
COPY pnpm-workspace.yaml pnpm-lock.yaml package.json ./
COPY packages/common-middleware/package.json ./packages/common-middleware/
COPY packages/common-utils/package.json ./packages/common-utils/
COPY packages/logger/package.json ./packages/logger/
COPY apps/api-gateway/package.json ./apps/api-gateway/

# Install all deps (including dev) to allow build
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
    pnpm install --frozen-lockfile

# =============================================================================
# Build stage - compile packages and service
# =============================================================================
FROM deps AS build

WORKDIR /app

# Copy source and tsconfig
COPY packages/ ./packages/
COPY tsconfig.base.json ./

# Build shared packages
RUN pnpm run build:packages

# Copy api-gateway source
COPY apps/api-gateway ./apps/api-gateway

# Build service
WORKDIR /app/apps/api-gateway
RUN pnpm run build

# =============================================================================
# Prune deps for production
# =============================================================================
FROM build AS prune
WORKDIR /app

# Run pnpm deploy to get only prod deps for api-gateway
RUN pnpm deploy --filter=@vidyalayaone/api-gateway --prod --legacy /prod/api-gateway

# =============================================================================
# Production stage - minimal runtime image
# =============================================================================
FROM base AS production

WORKDIR /prod/api-gateway

# Copy pruned production deps
COPY --from=prune /prod/api-gateway ./

# Copy built code (dist)
COPY --from=build /app/apps/api-gateway/dist ./dist

# Fix ownership
RUN chown -R appuser:appgroup /prod/api-gateway

# Switch to non-root
USER appuser

# Expose app port
EXPOSE 3000

# Healthcheck for k8s
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start service
CMD ["node", "dist/server.js"]
